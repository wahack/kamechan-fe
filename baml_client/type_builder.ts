/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    BCon: ClassBuilder<'BCon'>;
    
    BNodeConnection: ClassViewer<'BNodeConnection', "main">;
    
    BNodeConnectionNode: ClassViewer<'BNodeConnectionNode', "node" | "type" | "index">;
    
    BWorkflowNodes: ClassViewer<'BWorkflowNodes', "type" | "name" | "parameters">;
    
    BWorkflowNodesParams: ClassViewer<'BWorkflowNodesParams', "inputSource" | "params" | "functionCode">;
    
    DynamicData: ClassBuilder<'DynamicData'>;
    
    LookupNodeDocTool: ClassViewer<'LookupNodeDocTool', "tool_name" | "queryPhrases">;
    
    Message: ClassViewer<'Message', "role" | "content">;
    
    N8nWorkflow: ClassViewer<'N8nWorkflow', "nodes" | "connections">;
    
    NodeExecuteTool: ClassViewer<'NodeExecuteTool', "tool_name" | "node" | "purpose" | "parameters">;
    
    RequirementsNodesResult: ClassViewer<'RequirementsNodesResult', "reasoning" | "nodes">;
    
    ThinkTool: ClassViewer<'ThinkTool', "tool_name" | "thought">;
    
    WorkflowBuilt: ClassViewer<'WorkflowBuilt', "workflowData">;
    
    WorkflowIntention: ClassViewer<'WorkflowIntention', "reasoning" | "mermaidFlowchart">;
    
    WorkflowNodeDocs: ClassViewer<'WorkflowNodeDocs', "name" | "description">;
    
    
    ChatClassification: EnumViewer<'ChatClassification', "Workflow" | "NotWorflow" | "ScheduledWorkflow">;
    
    Role: EnumViewer<'Role', "User" | "Assistant" | "System" | "Tool">;
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "BCon","BNodeConnection","BNodeConnectionNode","BWorkflowNodes","BWorkflowNodesParams","DynamicData","LookupNodeDocTool","Message","N8nWorkflow","NodeExecuteTool","RequirementsNodesResult","ThinkTool","WorkflowBuilt","WorkflowIntention","WorkflowNodeDocs",
          ]),
          enums: new Set([
            "ChatClassification","Role",
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.BCon = this.tb.classBuilder("BCon", [
          
        ]);
        
        this.BNodeConnection = this.tb.classViewer("BNodeConnection", [
          "main",
        ]);
        
        this.BNodeConnectionNode = this.tb.classViewer("BNodeConnectionNode", [
          "node","type","index",
        ]);
        
        this.BWorkflowNodes = this.tb.classViewer("BWorkflowNodes", [
          "type","name","parameters",
        ]);
        
        this.BWorkflowNodesParams = this.tb.classViewer("BWorkflowNodesParams", [
          "inputSource","params","functionCode",
        ]);
        
        this.DynamicData = this.tb.classBuilder("DynamicData", [
          
        ]);
        
        this.LookupNodeDocTool = this.tb.classViewer("LookupNodeDocTool", [
          "tool_name","queryPhrases",
        ]);
        
        this.Message = this.tb.classViewer("Message", [
          "role","content",
        ]);
        
        this.N8nWorkflow = this.tb.classViewer("N8nWorkflow", [
          "nodes","connections",
        ]);
        
        this.NodeExecuteTool = this.tb.classViewer("NodeExecuteTool", [
          "tool_name","node","purpose","parameters",
        ]);
        
        this.RequirementsNodesResult = this.tb.classViewer("RequirementsNodesResult", [
          "reasoning","nodes",
        ]);
        
        this.ThinkTool = this.tb.classViewer("ThinkTool", [
          "tool_name","thought",
        ]);
        
        this.WorkflowBuilt = this.tb.classViewer("WorkflowBuilt", [
          "workflowData",
        ]);
        
        this.WorkflowIntention = this.tb.classViewer("WorkflowIntention", [
          "reasoning","mermaidFlowchart",
        ]);
        
        this.WorkflowNodeDocs = this.tb.classViewer("WorkflowNodeDocs", [
          "name","description",
        ]);
        
        
        this.ChatClassification = this.tb.enumViewer("ChatClassification", [
          "Workflow","NotWorflow","ScheduledWorkflow",
        ]);
        
        this.Role = this.tb.enumViewer("Role", [
          "User","Assistant","System","Tool",
        ]);
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}