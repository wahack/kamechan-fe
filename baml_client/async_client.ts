/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, FunctionResult, BamlCtxManager, ClientRegistry, Image, Audio, Collector } from "@boundaryml/baml"
import { toBamlError, BamlStream, type HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {BCon, BNodeConnection, BNodeConnectionNode, BWorkflowNodes, BWorkflowNodesParams, ChatClassification, DynamicData, LookupNodeDocTool, Message, N8nWorkflow, NodeExecuteTool, RequirementsNodesResult, Role, ThinkTool, WorkflowBuilt, WorkflowIntention, WorkflowNodeDocs} from "./types"
import type TypeBuilder from "./type_builder"
import { AsyncHttpRequest, AsyncHttpStreamRequest } from "./async_request"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
}

export class BamlAsyncClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private streamClient: BamlStreamClient
  private httpRequest: AsyncHttpRequest
  private httpStreamRequest: AsyncHttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.streamClient = new BamlStreamClient(runtime, ctxManager, bamlOptions)
    this.httpRequest = new AsyncHttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new AsyncHttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlAsyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  get stream() {
    return this.streamClient
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  
  async ClassifyMessage(
      messages: Message[],
      __baml_options__?: BamlCallOptions
  ): Promise<ChatClassification> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "ClassifyMessage",
        {
          "messages": messages
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as ChatClassification
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async FixdWorkflow(
      messages: Message[],outputExamples: string[],workflow: string,errorMessage: string,services: WorkflowNodeDocs[],nodesDoc: string,
      __baml_options__?: BamlCallOptions
  ): Promise<LookupNodeDocTool | NodeExecuteTool | WorkflowBuilt> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "FixdWorkflow",
        {
          "messages": messages,"outputExamples": outputExamples,"workflow": workflow,"errorMessage": errorMessage,"services": services,"nodesDoc": nodesDoc
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as LookupNodeDocTool | NodeExecuteTool | WorkflowBuilt
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateN8n(
      messages: Message[],services: WorkflowNodeDocs[],shots: string[],
      __baml_options__?: BamlCallOptions
  ): Promise<LookupNodeDocTool | NodeExecuteTool | N8nWorkflow> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "GenerateN8n",
        {
          "messages": messages,"services": services,"shots": shots
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as LookupNodeDocTool | NodeExecuteTool | N8nWorkflow
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ParseN8n(
      str: string,
      __baml_options__?: BamlCallOptions
  ): Promise<N8nWorkflow> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "ParseN8n",
        {
          "str": str
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as N8nWorkflow
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async RequirementsFlowchart(
      messages: Message[],services: WorkflowNodeDocs[],outputExamples: string[],
      __baml_options__?: BamlCallOptions
  ): Promise<ThinkTool | LookupNodeDocTool | NodeExecuteTool | WorkflowIntention> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "RequirementsFlowchart",
        {
          "messages": messages,"services": services,"outputExamples": outputExamples
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as ThinkTool | LookupNodeDocTool | NodeExecuteTool | WorkflowIntention
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async RequirementsNodes(
      messages: Message[],services: WorkflowNodeDocs[],
      __baml_options__?: BamlCallOptions
  ): Promise<RequirementsNodesResult> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = await this.runtime.callFunction(
        "RequirementsNodes",
        {
          "messages": messages,"services": services
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as RequirementsNodesResult
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

class BamlStreamClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private bamlOptions: BamlCallOptions

  constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.bamlOptions = bamlOptions || {}
  }

  
  ClassifyMessage(
      messages: Message[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<types.ChatClassification, ChatClassification> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "ClassifyMessage",
        {
          "messages": messages
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<types.ChatClassification, ChatClassification>(
        raw,
        (a): types.ChatClassification => a,
        (a): ChatClassification => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  FixdWorkflow(
      messages: Message[],outputExamples: string[],workflow: string,errorMessage: string,services: WorkflowNodeDocs[],nodesDoc: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<((partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.WorkflowBuilt | null)), LookupNodeDocTool | NodeExecuteTool | WorkflowBuilt> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "FixdWorkflow",
        {
          "messages": messages,"outputExamples": outputExamples,"workflow": workflow,"errorMessage": errorMessage,"services": services,"nodesDoc": nodesDoc
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<((partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.WorkflowBuilt | null)), LookupNodeDocTool | NodeExecuteTool | WorkflowBuilt>(
        raw,
        (a): ((partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.WorkflowBuilt | null)) => a,
        (a): LookupNodeDocTool | NodeExecuteTool | WorkflowBuilt => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateN8n(
      messages: Message[],services: WorkflowNodeDocs[],shots: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<((partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.N8nWorkflow | null)), LookupNodeDocTool | NodeExecuteTool | N8nWorkflow> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "GenerateN8n",
        {
          "messages": messages,"services": services,"shots": shots
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<((partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.N8nWorkflow | null)), LookupNodeDocTool | NodeExecuteTool | N8nWorkflow>(
        raw,
        (a): ((partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.N8nWorkflow | null)) => a,
        (a): LookupNodeDocTool | NodeExecuteTool | N8nWorkflow => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ParseN8n(
      str: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<partial_types.N8nWorkflow, N8nWorkflow> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "ParseN8n",
        {
          "str": str
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<partial_types.N8nWorkflow, N8nWorkflow>(
        raw,
        (a): partial_types.N8nWorkflow => a,
        (a): N8nWorkflow => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  RequirementsFlowchart(
      messages: Message[],services: WorkflowNodeDocs[],outputExamples: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<((partial_types.ThinkTool | null) | (partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.WorkflowIntention | null)), ThinkTool | LookupNodeDocTool | NodeExecuteTool | WorkflowIntention> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "RequirementsFlowchart",
        {
          "messages": messages,"services": services,"outputExamples": outputExamples
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<((partial_types.ThinkTool | null) | (partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.WorkflowIntention | null)), ThinkTool | LookupNodeDocTool | NodeExecuteTool | WorkflowIntention>(
        raw,
        (a): ((partial_types.ThinkTool | null) | (partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.WorkflowIntention | null)) => a,
        (a): ThinkTool | LookupNodeDocTool | NodeExecuteTool | WorkflowIntention => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  RequirementsNodes(
      messages: Message[],services: WorkflowNodeDocs[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry, collector?: Collector | Collector[] }
  ): BamlStream<partial_types.RequirementsNodesResult, RequirementsNodesResult> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.streamFunction(
        "RequirementsNodes",
        {
          "messages": messages,"services": services
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return new BamlStream<partial_types.RequirementsNodesResult, RequirementsNodesResult>(
        raw,
        (a): partial_types.RequirementsNodesResult => a,
        (a): RequirementsNodesResult => a,
        this.ctxManager.cloneContext(),
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)