/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  BCon,  BNodeConnection,  BNodeConnectionNode,  BWorkflowNodes,  BWorkflowNodesParams,  ChatClassification,  DynamicData,  LookupNodeDocTool,  Message,  N8nWorkflow,  NodeExecuteTool,  RequirementsNodesResult,  Role,  ThinkTool,  WorkflowBuilt,  WorkflowIntention,  WorkflowNodeDocs } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
    value: T
    state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    
    export interface BCon {
        [key: string]: any;
    }
    
    export interface BNodeConnection {
        main?: (partial_types.BNodeConnectionNode | null)[][]
    }
    
    export interface BNodeConnectionNode {
        node?: (string | null)
        type?: (string | null)
        index?: (number | null)
    }
    
    export interface BWorkflowNodes {
        type?: (string | null)
        name?: (string | null)
        parameters?: (partial_types.BWorkflowNodesParams | null)
    }
    
    export interface BWorkflowNodesParams {
        inputSource: ((string | null) | null)
        params: ((string | null) | null)
        functionCode: ((string | null) | null)
    }
    
    export interface DynamicData {
        [key: string]: any;
    }
    
    export interface LookupNodeDocTool {
        tool_name: "LookupNodeDoc"
        queryPhrases?: (string | null)
    }
    
    export interface Message {
        role?: (string | null)
        content?: (string | null)
    }
    
    export interface N8nWorkflow {
        nodes?: (partial_types.BWorkflowNodes | null)[]
        connections?: (partial_types.BCon | null)
    }
    
    export interface NodeExecuteTool {
        tool_name: "NodeExecuteTool"
        node?: (string | null)
        purpose?: (string | null)
        parameters?: (string | null)
    }
    
    export interface RequirementsNodesResult {
        reasoning?: (string | null)
        nodes?: (string | null)[]
    }
    
    export interface ThinkTool {
        tool_name: "ThinkTool"
        thought?: (string | null)
    }
    
    export interface WorkflowBuilt {
        workflowData?: (string | null)
    }
    
    export interface WorkflowIntention {
        reasoning?: (string | null)
        mermaidFlowchart?: (string | null)
    }
    
    export interface WorkflowNodeDocs {
        name?: (string | null)
        description?: (string | null)
    }
    
}