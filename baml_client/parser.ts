/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Collector } from "@boundaryml/baml"
import { toBamlError } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {BCon, BNodeConnection, BNodeConnectionNode, BWorkflowNodes, BWorkflowNodesParams, ChatClassification, DynamicData, LookupNodeDocTool, Message, N8nWorkflow, NodeExecuteTool, RequirementsNodesResult, Role, ThinkTool, WorkflowBuilt, WorkflowIntention, WorkflowNodeDocs} from "./types"
import type TypeBuilder from "./type_builder"

export class LlmResponseParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  ClassifyMessage(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ChatClassification {
    try {
      return this.runtime.parseLlmResponse(
        "ClassifyMessage",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as ChatClassification
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  FixdWorkflow(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): LookupNodeDocTool | NodeExecuteTool | WorkflowBuilt {
    try {
      return this.runtime.parseLlmResponse(
        "FixdWorkflow",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as LookupNodeDocTool | NodeExecuteTool | WorkflowBuilt
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateN8n(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): LookupNodeDocTool | NodeExecuteTool | N8nWorkflow {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateN8n",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as LookupNodeDocTool | NodeExecuteTool | N8nWorkflow
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ParseN8n(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): N8nWorkflow {
    try {
      return this.runtime.parseLlmResponse(
        "ParseN8n",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as N8nWorkflow
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  RequirementsFlowchart(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ThinkTool | LookupNodeDocTool | NodeExecuteTool | WorkflowIntention {
    try {
      return this.runtime.parseLlmResponse(
        "RequirementsFlowchart",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as ThinkTool | LookupNodeDocTool | NodeExecuteTool | WorkflowIntention
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  RequirementsNodes(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): RequirementsNodesResult {
    try {
      return this.runtime.parseLlmResponse(
        "RequirementsNodes",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as RequirementsNodesResult
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class LlmStreamParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  ClassifyMessage(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): types.ChatClassification {
    try {
      return this.runtime.parseLlmResponse(
        "ClassifyMessage",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as types.ChatClassification
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  FixdWorkflow(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ((partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.WorkflowBuilt | null)) {
    try {
      return this.runtime.parseLlmResponse(
        "FixdWorkflow",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as ((partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.WorkflowBuilt | null))
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateN8n(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ((partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.N8nWorkflow | null)) {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateN8n",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as ((partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.N8nWorkflow | null))
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ParseN8n(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.N8nWorkflow {
    try {
      return this.runtime.parseLlmResponse(
        "ParseN8n",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.N8nWorkflow
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  RequirementsFlowchart(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ((partial_types.ThinkTool | null) | (partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.WorkflowIntention | null)) {
    try {
      return this.runtime.parseLlmResponse(
        "RequirementsFlowchart",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as ((partial_types.ThinkTool | null) | (partial_types.LookupNodeDocTool | null) | (partial_types.NodeExecuteTool | null) | (partial_types.WorkflowIntention | null))
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  RequirementsNodes(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.RequirementsNodesResult {
    try {
      return this.runtime.parseLlmResponse(
        "RequirementsNodes",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.RequirementsNodesResult
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}